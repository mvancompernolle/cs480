#include <GL/glew.h> // glew must be included before the main gl libs
#include <SDL2/SDL.h>
#include <iostream>

//--Data types
//This object will define the attributes of a vertex(position, color, etc...)
struct Vertex
{
    GLfloat position[3];
    GLfloat color[3];
};

//--Evil Global variables
//Just for this example!
SDL_Window *window;
SDL_GLContext gl_context;
bool running = true;
int windowWidth = 640, windowHeight = 480;// Window size
GLuint program;// The GLSL program handle
GLuint vbo_geometry;// VBO handle for our geometry

//attribute locations
GLint loc_position;
GLint loc_color;

// SDL related functions
void createWindow(int width, int height);
void SDLMainLoop();
void pollEvents();
void render();

// Resource Management
void cleanup();
bool initialize();

int main(int argc, char **argv) 
{
	// Intitialize SDL
    if(SDL_Init(SDL_INIT_VIDEO) < 0) 
	{
        std::cerr << "Cannot Initialize SDL" << std::endl;
        exit(1);
    }

	// Create the program window. Name of program can be set within the createWindow function
    createWindow(windowWidth, windowHeight);

    // Now that the window is created the GL context is fully set up
    // Because of that we can now initialize GLEW to prepare work with shaders
    GLenum status = glewInit();
    if( status != GLEW_OK)
    {
        std::cerr << "[F] GLEW NOT INITIALIZED: ";
        std::cerr << glewGetErrorString(status) << std::endl;
        return -1;
    }

    // Initialize all of our resources(shaders, geometry)
    bool init = initialize();
    if(init)
    {
        SDLMainLoop();
    }
}

void createWindow(int width, int height)
{
	// Set double buffering to on
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);

	// Create the window and set the title
    window = SDL_CreateWindow("Pass Through Shader Test", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
                        width, height, SDL_WINDOW_OPENGL | SDL_WINDOW_SHOWN);

    if(!window) {
        std::cerr << "Unable to create GL Window" << std::endl;
        exit(0);
    }

	// Set the newly created window as the current window
    gl_context = SDL_GL_CreateContext(window);

	// Synchronize screen updates with monitor vertical retrace
    SDL_GL_SetSwapInterval(1);
}

void SDLMainLoop()
{
	// While program is running check for events and render
    while(running) 
	{
        pollEvents();
		render();
    }
}

void render()
{
    // --Render the scene
    // clear the screen
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // enable the shader program
    glUseProgram(program);

    // set up the Vertex Buffer Object so it can be drawn
    glEnableVertexAttribArray(loc_position);
    glEnableVertexAttribArray(loc_color);
    glBindBuffer(GL_ARRAY_BUFFER, vbo_geometry);
    // set pointers into the vbo for each of the attributes(position and color)
    glVertexAttribPointer( loc_position, //location of attribute
                           3, //number of elements
                           GL_FLOAT, //type
                           GL_FALSE, //normalized?
                           sizeof(Vertex), //stride
                           0); //offset

    glVertexAttribPointer( loc_color,
                           3,
                           GL_FLOAT,
                           GL_FALSE,
                           sizeof(Vertex),
                           (void*)offsetof(Vertex,color));

    glDrawArrays(GL_TRIANGLES, 0, 3); //mode, starting index, count

    // clean up
    glDisableVertexAttribArray(loc_position);
    glDisableVertexAttribArray(loc_color);

	// swap the render buffers
	SDL_GL_SwapWindow(window);
                           
}

void pollEvents()
{
    SDL_Event event;
    char key;
	
	// Loop through all events that have occurred
    while(SDL_PollEvent(&event)) 
	{
        switch(event.type) 
		{
			// Check to see if a key was pressed down
            case SDL_KEYDOWN:
				// Get the type of key that was pressed
                key = (char)event.key.keysym.sym;

				// If escape was pressed, cleanup program and exit
                if(key == SDLK_ESCAPE) 
				{
		    		cleanup();
                    exit(0);
                }
				break;
        }
    }
}

bool initialize()
{
    // Initialize basic geometry and shaders for this example

    //this defines a triangle, feel free to change it
    // each row is first the position of the vertex then the color
    Vertex geometry[] = { {{0.0, 0.9, 0.0}, {1.0, 0.0, 0.0}},
                          {{-0.9, -0.9, 0.0}, {0.0, 1.0, 0.0}},
                          {{0.9, -0.9, 0.0}, {0.0, 0.0, 1.0}}};
    // Create a Vertex Buffer object to store this vertex info on the GPU
    glGenBuffers(1, &vbo_geometry);
    glBindBuffer(GL_ARRAY_BUFFER, vbo_geometry);
    glBufferData(GL_ARRAY_BUFFER, sizeof(geometry), geometry, GL_STATIC_DRAW);

    //--Geometry done

    GLuint vertex_shader = glCreateShader(GL_VERTEX_SHADER);
    GLuint fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);

    //Shader Sources
    // Put these into files and write a loader in the future
    const char *vs =
        "attribute vec3 v_position;"
        "attribute vec3 v_color;"
        "varying vec3 color;"
        "void main(void){"
        "   gl_Position = vec4(v_position, 1.0);"
        "   color = v_color;"
        "}";

    const char *fs =
        "varying vec3 color;"
        "void main(void){"
        "   gl_FragColor = vec4(color.xyz, 1.0);"
        "}";

    //compile the shaders
    GLint shader_status;

    // Vertex shader first
    glShaderSource(vertex_shader, 1, &vs, NULL);
    glCompileShader(vertex_shader);
    //check the compile status
    glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &shader_status);
    if(!shader_status)
    {
        std::cerr << "[F] FAILED TO COMPILE VERTEX SHADER!" << std::endl;
        return false;
    }

    // Now the Fragment shader
    glShaderSource(fragment_shader, 1, &fs, NULL);
    glCompileShader(fragment_shader);
    //check the compile status
    glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, &shader_status);
    if(!shader_status)
    {
        std::cerr << "[F] FAILED TO COMPILE FRAGMENT SHADER!" << std::endl;
        return false;
    }

    //Now we link the 2 shader objects into a program
    //This program is what is run on the GPU
    program = glCreateProgram();
    glAttachShader(program, vertex_shader);
    glAttachShader(program, fragment_shader);
    glLinkProgram(program);
    //check if everything linked ok
    glGetProgramiv(program, GL_LINK_STATUS, &shader_status);
    if(!shader_status)
    {
        std::cerr << "[F] THE SHADER PROGRAM FAILED TO LINK" << std::endl;
        return false;
    }

    //Now we set the locations of the attributes and uniforms
    //this allows us to access them easily while rendering
    loc_position = glGetAttribLocation(program,
                    const_cast<const char*>("v_position"));
    if(loc_position == -1)
    {
        std::cerr << "[F] POSITION NOT FOUND" << std::endl;
        return false;
    }

    loc_color = glGetAttribLocation(program,
                    const_cast<const char*>("v_color"));
    if(loc_color == -1)
    {
        std::cerr << "[F] V_COLOR NOT FOUND" << std::endl;
        return false;
    }

    //and its done
    return true;
}

void cleanup()
{
    // Clean up, Clean up
    glDeleteProgram(program);
    glDeleteBuffers(1, &vbo_geometry);

	// Clean up SDL
    SDL_GL_DeleteContext(gl_context);
    SDL_DestroyWindow(window);
    SDL_Quit();
}
